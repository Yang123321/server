* create Maze
** main idear
** step 1 : Core type
type Maze s = STUArray s (Int,Int) Word8  -- in the ST monad array

type MazeI  = UArray  (Int,Int) Word8 -- Immuatle Array

Room  -- 2
Floor -- 1
Null  -- 0
** Render the Maze
*** how to show the maze
create a image to show the maze
*** how to create a image from the array
class:: 
+ Pixel
+ BmpEncodeable

writeBitmap :: BmpEncodable pixel => FilePath -> Image pixel -> IO ()
**** BmpEncodeable pixel
I know the Pixel8 (Word8) is what, I can get Room,Floor,Null the values 
Room -- 0
Floor -- 100
Null -- 200
**** Image pixel 
data Image a = Image {
  imageWidth :: !Int
  imageHeigth :: !Int 
  imageData :: Vector (PixelBaseComopent a)
}
***** PixelBaseComopent
Type of the pixel component, "classical" images would have Word8 type as their PixelBaseComponent, HDR image would have Float for instance
PixelBaseComponent Pixel8 = Word8
**** generateImage or withImage maybe I want to use
finish
**** 2000 * 2000 State 
300 300 9 21 
400 400 16 32  7 11  1.57
500 500 25 49  9 17  1.88
1000 1000 100 179 75 130 1.73
** create a lot of rooms and carve to Mzae
*** CreateRoom.hs
*** Maze's Width and Heigth
***** the require of (mw,mh): odd
mwDefault = 9
mhDefault = 9
*** Room's Width , Heigth and Positon
**** how to decide the Room's block's Positon
give the top-up center position (i,j) and (rw,wh)
***** the require of (i,j): (i range [1,mw-rw-1],j range [1,mh-rh-1]),odd
***** the require of (rw,rh): (rw--[1,3,5],rh--[1,3,5]),odd
rwList = [3,5,7]
rhList = [3,5,7]
** FloodFill
direct: right down left up
floodfill ::Maze s -> (Int,Int)-> (Int,Int) -> ST s ()
if i>0 && i<mw-1 && j>0 && j < mh-1
then do 
  v <- readArray maze pos
  if v == 0 -- the position is Null (word8==0)
    then do 
    else return ()
else do 
return ()
** find the ConnectPoint
mark the connectPoint as -1
** Connect Rooms and Route
*** I need to record the created random rooms
*** create the types of Room in Types.hs 
type Number = Int
data Room = Room (Int,Int,Int,Int) [ConnectPoint] -- Room (i,j,i',j') []
*** use the map to record all of the room's information
type RoomMap  = Map Number Room
*** Mutable references in the (strict) ST monad. store the room's number and floor's number
Data.STRef
*** change the core type 
mwDefault = 11 :: Int
mhDefault = 11 :: Int

maxTest = 1000000 :: Int

creArrFromList :: [a] -> Array Int a
creArrFromList xs = listArray (0,length xs -1) xs

rwList = creArrFromList [1,3,5] :: Array Int Int
rhList = creArrFromList [1,3,5] :: Array Int Int



type Maze s = STUArray s (Int,Int) Int -- Int to mark the room's number and floor's number
type MazeI  = UArray  (Int,Int) Int -- Int to mark the room's number and floor's number

type Number = Int
data RoomAndFloor = Room (Int,Int,Int,Int) [(Int,Int)]  --Room (i,j,i',j') [ConnectPoint]
                  | Floor [(Int,Int)]   -- Floor [ConnectPoint]
  deriving Show
type RoomMap = Map Number RoomAndFloor

*** use the map to record all of the Floor's information
data RoomAndFloor = Room (Int,Int,Int,Int) [(Int,Int)]  --Room (i,j,i',j') [ConnectPoint]
                  | Floor [(Int,Int)]   -- Floor [ConnectPoint]
  deriving Show

type RoomMap = Map Number RoomAndFloor
*** fille the RoomMap's [ConnectPoint] 
finish . It record Floors and Rooms
*** start connect the room and room and floor
**** create file ConnectRoomAndFloor.hs
**** It main to use RoomMap
**** it is really hard to finish !!! but I finish it.
** reverse carve
delete some floors that don't need
** save the mazeI,RoomMap,bmp,txt.
using the binary libray to save mazeI and RoomMap (very easy)
** error of me is :: [(i,j) | i <- [1..10],j <-[1..10]] , [(i,j) | i <- [1,10],j <-[1,10]]
* create custom play 
use gloss
* create server
** core type 
server 
TVar (Map name client) 

clinet

client
Handle
TVar (Int,Int)
* create client
* finish first run game 
* defined the SereverToClinet ClientToServer Commend
* finish the new login function. finish the testPing function
* test useing the sdl2 to reWrite the CustomGUI
** finish to use sdl2-ttf to show text in custom's GUI
** finish to show dynamic image
** test to finish to show Gif in sdl2 
* rewrite the server core
model 

client (tow threaded)
- sendInfor  yourOperate(up right down left) 20HZ 
- receiveInfor  playersPositionList (need to render)


server (two client service threaded)
- sendInfor playersPositionList 20HZ
- receiveInfor clientOperate




Server 
stm -- TArray i e -- e (Elem (Room or Null or Gate) Body)
Elem Ground Body
Ground = Room Int
       | Gate Int
       | Null
       | OtherStangeThings

       # | UserBuild Int Int
       # | Monster Int Int

Body = Client
     | Builds
     | Monsters
     | NoBody

Client = User Name  Handle (TVar (Int,Int))
